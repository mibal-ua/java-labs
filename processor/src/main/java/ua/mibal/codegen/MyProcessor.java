package ua.mibal.codegen;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Set;

import static javax.lang.model.SourceVersion.RELEASE_17;

/**
 * @author Mykhailo Balakhon
 * @link <a href="mailto:mykhailo.balakhon@communify.us">mykhailo.balakhon@communify.us</a>
 */
@SupportedAnnotationTypes("ua.mibal.codegen.api.GenerateSerializer")
@SupportedSourceVersion(RELEASE_17)
public class MyProcessor extends AbstractProcessor {

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        annotations.forEach(annotation ->
                roundEnv.getElementsAnnotatedWith(annotation)
                        .forEach(this::generateStubSerializerFor)
        );
        return true;
    }

    private void generateStubSerializerFor(Element serializer) {
        String className = serializer.getSimpleName().toString();
        String serializerName = className + "Impl";
        String packageName = serializer.getEnclosingElement().toString();

        try (PrintWriter writer = new PrintWriter(
                processingEnv.getFiler().createSourceFile(packageName + "." + serializerName).openWriter())) {
            writer.println("""
                    package %s;
                    
                    import %s;
                    
                    /**
                     * Autogenerated Serializer
                     *
                     * @author Mykhailo Balakhon
                     * @link <a href="mailto:mykhailo.balakhon@communify.us">mykhailo.balakhon@communify.us</a>
                     */
                    public class %s implements %s {
                    
                        public String json(Object o) {
                            return "123123";
                        }
                    
                        public String xml(Object o) {
                            return "123123";
                        }
                    }
                    """.formatted(packageName, packageName + "." + className, serializerName, className)
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
